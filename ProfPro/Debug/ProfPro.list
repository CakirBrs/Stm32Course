
ProfPro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bd0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d78  08000d78  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d78  08000d78  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000d78  08000d78  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d78  08000d78  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d78  08000d78  00010d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d7c  08000d7c  00010d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000d80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
 10 .bss          00000030  20000020  20000020  00020020  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000050  20000050  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 13 .debug_info   000019ac  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000752  00000000  00000000  000219fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000198  00000000  00000000  00022150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000130  00000000  00000000  000222e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000015f7  00000000  00000000  00022418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001985  00000000  00000000  00023a0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005c40  00000000  00000000  00025394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002afd4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000484  00000000  00000000  0002b024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000020 	.word	0x20000020
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000d60 	.word	0x08000d60

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000024 	.word	0x20000024
 80001e4:	08000d60 	.word	0x08000d60

080001e8 <nvic_irqno_enable>:
#include "coreM4.h"

static volatile clock_t tmTickCount;


void nvic_irqno_enable(uint8_t irq_num){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
	if(irq_num < 32)
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	2b1f      	cmp	r3, #31
 80001f6:	d809      	bhi.n	800020c <nvic_irqno_enable+0x24>
		NVIC_ISERx->NVIC_ISER0 |= (1U<<irq_num );
 80001f8:	4b16      	ldr	r3, [pc, #88]	; (8000254 <nvic_irqno_enable+0x6c>)
 80001fa:	681a      	ldr	r2, [r3, #0]
 80001fc:	79fb      	ldrb	r3, [r7, #7]
 80001fe:	2101      	movs	r1, #1
 8000200:	fa01 f303 	lsl.w	r3, r1, r3
 8000204:	4913      	ldr	r1, [pc, #76]	; (8000254 <nvic_irqno_enable+0x6c>)
 8000206:	4313      	orrs	r3, r2
 8000208:	600b      	str	r3, [r1, #0]
	else if( irq_num < 64)
		NVIC_ISERx->NVIC_ISER1 |= (1U<<(irq_num%32));
	else if(irq_num <= 81)
		NVIC_ISERx->NVIC_ISER2 |= (1U<<(irq_num%32));

}
 800020a:	e01c      	b.n	8000246 <nvic_irqno_enable+0x5e>
	else if( irq_num < 64)
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	2b3f      	cmp	r3, #63	; 0x3f
 8000210:	d80b      	bhi.n	800022a <nvic_irqno_enable+0x42>
		NVIC_ISERx->NVIC_ISER1 |= (1U<<(irq_num%32));
 8000212:	4b10      	ldr	r3, [pc, #64]	; (8000254 <nvic_irqno_enable+0x6c>)
 8000214:	685a      	ldr	r2, [r3, #4]
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 031f 	and.w	r3, r3, #31
 800021c:	2101      	movs	r1, #1
 800021e:	fa01 f303 	lsl.w	r3, r1, r3
 8000222:	490c      	ldr	r1, [pc, #48]	; (8000254 <nvic_irqno_enable+0x6c>)
 8000224:	4313      	orrs	r3, r2
 8000226:	604b      	str	r3, [r1, #4]
}
 8000228:	e00d      	b.n	8000246 <nvic_irqno_enable+0x5e>
	else if(irq_num <= 81)
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	2b51      	cmp	r3, #81	; 0x51
 800022e:	d80a      	bhi.n	8000246 <nvic_irqno_enable+0x5e>
		NVIC_ISERx->NVIC_ISER2 |= (1U<<(irq_num%32));
 8000230:	4b08      	ldr	r3, [pc, #32]	; (8000254 <nvic_irqno_enable+0x6c>)
 8000232:	689a      	ldr	r2, [r3, #8]
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	f003 031f 	and.w	r3, r3, #31
 800023a:	2101      	movs	r1, #1
 800023c:	fa01 f303 	lsl.w	r3, r1, r3
 8000240:	4904      	ldr	r1, [pc, #16]	; (8000254 <nvic_irqno_enable+0x6c>)
 8000242:	4313      	orrs	r3, r2
 8000244:	608b      	str	r3, [r1, #8]
}
 8000246:	bf00      	nop
 8000248:	370c      	adds	r7, #12
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000e100 	.word	0xe000e100

08000258 <nvic_irqno_disable>:

void nvic_irqno_disable(uint8_t irq_num){
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	71fb      	strb	r3, [r7, #7]
	if(irq_num < 32)
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	2b1f      	cmp	r3, #31
 8000266:	d809      	bhi.n	800027c <nvic_irqno_disable+0x24>
		NVIC_ICERx->NVIC_ICER0 |= ((1U<<irq_num ));
 8000268:	4b16      	ldr	r3, [pc, #88]	; (80002c4 <nvic_irqno_disable+0x6c>)
 800026a:	681a      	ldr	r2, [r3, #0]
 800026c:	79fb      	ldrb	r3, [r7, #7]
 800026e:	2101      	movs	r1, #1
 8000270:	fa01 f303 	lsl.w	r3, r1, r3
 8000274:	4913      	ldr	r1, [pc, #76]	; (80002c4 <nvic_irqno_disable+0x6c>)
 8000276:	4313      	orrs	r3, r2
 8000278:	600b      	str	r3, [r1, #0]
	else if( irq_num < 64)
		NVIC_ICERx->NVIC_ICER1 |= (1U<<(irq_num%32));
	else if(irq_num <= 81)
		NVIC_ICERx->NVIC_ICER2 |= (1U<<(irq_num%32));
}
 800027a:	e01c      	b.n	80002b6 <nvic_irqno_disable+0x5e>
	else if( irq_num < 64)
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	2b3f      	cmp	r3, #63	; 0x3f
 8000280:	d80b      	bhi.n	800029a <nvic_irqno_disable+0x42>
		NVIC_ICERx->NVIC_ICER1 |= (1U<<(irq_num%32));
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <nvic_irqno_disable+0x6c>)
 8000284:	685a      	ldr	r2, [r3, #4]
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	f003 031f 	and.w	r3, r3, #31
 800028c:	2101      	movs	r1, #1
 800028e:	fa01 f303 	lsl.w	r3, r1, r3
 8000292:	490c      	ldr	r1, [pc, #48]	; (80002c4 <nvic_irqno_disable+0x6c>)
 8000294:	4313      	orrs	r3, r2
 8000296:	604b      	str	r3, [r1, #4]
}
 8000298:	e00d      	b.n	80002b6 <nvic_irqno_disable+0x5e>
	else if(irq_num <= 81)
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	2b51      	cmp	r3, #81	; 0x51
 800029e:	d80a      	bhi.n	80002b6 <nvic_irqno_disable+0x5e>
		NVIC_ICERx->NVIC_ICER2 |= (1U<<(irq_num%32));
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <nvic_irqno_disable+0x6c>)
 80002a2:	689a      	ldr	r2, [r3, #8]
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	f003 031f 	and.w	r3, r3, #31
 80002aa:	2101      	movs	r1, #1
 80002ac:	fa01 f303 	lsl.w	r3, r1, r3
 80002b0:	4904      	ldr	r1, [pc, #16]	; (80002c4 <nvic_irqno_disable+0x6c>)
 80002b2:	4313      	orrs	r3, r2
 80002b4:	608b      	str	r3, [r1, #8]
}
 80002b6:	bf00      	nop
 80002b8:	370c      	adds	r7, #12
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	e000e180 	.word	0xe000e180

080002c8 <systick_config>:



void systick_config(uint32_t tick){
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
	//1-Program reload value
	//2-Clear current value
	//3-Program Control and Status register

	SYSTIC->SYST_RVR= tick -1;
 80002d0:	4a0f      	ldr	r2, [pc, #60]	; (8000310 <systick_config+0x48>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	3b01      	subs	r3, #1
 80002d6:	6053      	str	r3, [r2, #4]
	SYSTIC->SYST_CVR= 0;
 80002d8:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <systick_config+0x48>)
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]
	SYSTIC->SYST_CSR |= (1U<<2);
 80002de:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <systick_config+0x48>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	4a0b      	ldr	r2, [pc, #44]	; (8000310 <systick_config+0x48>)
 80002e4:	f043 0304 	orr.w	r3, r3, #4
 80002e8:	6013      	str	r3, [r2, #0]
	SYSTIC->SYST_CSR |= (1U<<1);
 80002ea:	4b09      	ldr	r3, [pc, #36]	; (8000310 <systick_config+0x48>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a08      	ldr	r2, [pc, #32]	; (8000310 <systick_config+0x48>)
 80002f0:	f043 0302 	orr.w	r3, r3, #2
 80002f4:	6013      	str	r3, [r2, #0]
	SYSTIC->SYST_CSR |= (1U<<0); //COUNTER ENABLE
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <systick_config+0x48>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a05      	ldr	r2, [pc, #20]	; (8000310 <systick_config+0x48>)
 80002fc:	f043 0301 	orr.w	r3, r3, #1
 8000300:	6013      	str	r3, [r2, #0]

}
 8000302:	bf00      	nop
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	e000e010 	.word	0xe000e010

08000314 <SysTick_Handler>:

void SysTick_Handler(){
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
	//gpio_toggleto_output_pin(GPIOD, GPIO_PIN_NO_15);
	++tmTickCount;
 8000318:	4b04      	ldr	r3, [pc, #16]	; (800032c <SysTick_Handler+0x18>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	3301      	adds	r3, #1
 800031e:	4a03      	ldr	r2, [pc, #12]	; (800032c <SysTick_Handler+0x18>)
 8000320:	6013      	str	r3, [r2, #0]
}
 8000322:	bf00      	nop
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr
 800032c:	2000003c 	.word	0x2000003c

08000330 <clock>:



clock_t clock(){
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
	tmTickCount;
 8000334:	4b03      	ldr	r3, [pc, #12]	; (8000344 <clock+0x14>)
 8000336:	681b      	ldr	r3, [r3, #0]
}
 8000338:	bf00      	nop
 800033a:	4618      	mov	r0, r3
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	2000003c 	.word	0x2000003c

08000348 <gpio_perip_en>:
 */
#include "gpio.h"



PRIVATE void gpio_perip_en(GPIO_RegDef_t * pGpiox){
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
	if(pGpiox==GPIOA)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	4a33      	ldr	r2, [pc, #204]	; (8000420 <gpio_perip_en+0xd8>)
 8000354:	4293      	cmp	r3, r2
 8000356:	d106      	bne.n	8000366 <gpio_perip_en+0x1e>
		GPIOA_CLOCK_ENABLE();
 8000358:	4b32      	ldr	r3, [pc, #200]	; (8000424 <gpio_perip_en+0xdc>)
 800035a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035c:	4a31      	ldr	r2, [pc, #196]	; (8000424 <gpio_perip_en+0xdc>)
 800035e:	f043 0301 	orr.w	r3, r3, #1
 8000362:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOG_CLOCK_ENABLE();
	else if(pGpiox==GPIOH)
		GPIOH_CLOCK_ENABLE();
	else if(pGpiox==GPIOI)
		GPIOI_CLOCK_ENABLE();
}
 8000364:	e056      	b.n	8000414 <gpio_perip_en+0xcc>
	else if(pGpiox==GPIOB)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4a2f      	ldr	r2, [pc, #188]	; (8000428 <gpio_perip_en+0xe0>)
 800036a:	4293      	cmp	r3, r2
 800036c:	d106      	bne.n	800037c <gpio_perip_en+0x34>
		GPIOB_CLOCK_ENABLE();
 800036e:	4b2d      	ldr	r3, [pc, #180]	; (8000424 <gpio_perip_en+0xdc>)
 8000370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000372:	4a2c      	ldr	r2, [pc, #176]	; (8000424 <gpio_perip_en+0xdc>)
 8000374:	f043 0302 	orr.w	r3, r3, #2
 8000378:	6313      	str	r3, [r2, #48]	; 0x30
}
 800037a:	e04b      	b.n	8000414 <gpio_perip_en+0xcc>
	else if(pGpiox==GPIOC)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4a2b      	ldr	r2, [pc, #172]	; (800042c <gpio_perip_en+0xe4>)
 8000380:	4293      	cmp	r3, r2
 8000382:	d106      	bne.n	8000392 <gpio_perip_en+0x4a>
		GPIOC_CLOCK_ENABLE();
 8000384:	4b27      	ldr	r3, [pc, #156]	; (8000424 <gpio_perip_en+0xdc>)
 8000386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000388:	4a26      	ldr	r2, [pc, #152]	; (8000424 <gpio_perip_en+0xdc>)
 800038a:	f043 0304 	orr.w	r3, r3, #4
 800038e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000390:	e040      	b.n	8000414 <gpio_perip_en+0xcc>
	else if(pGpiox==GPIOD)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4a26      	ldr	r2, [pc, #152]	; (8000430 <gpio_perip_en+0xe8>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d106      	bne.n	80003a8 <gpio_perip_en+0x60>
		GPIOD_CLOCK_ENABLE();
 800039a:	4b22      	ldr	r3, [pc, #136]	; (8000424 <gpio_perip_en+0xdc>)
 800039c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039e:	4a21      	ldr	r2, [pc, #132]	; (8000424 <gpio_perip_en+0xdc>)
 80003a0:	f043 0308 	orr.w	r3, r3, #8
 80003a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a6:	e035      	b.n	8000414 <gpio_perip_en+0xcc>
	else if(pGpiox==GPIOE)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a22      	ldr	r2, [pc, #136]	; (8000434 <gpio_perip_en+0xec>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d106      	bne.n	80003be <gpio_perip_en+0x76>
		GPIOE_CLOCK_ENABLE();
 80003b0:	4b1c      	ldr	r3, [pc, #112]	; (8000424 <gpio_perip_en+0xdc>)
 80003b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b4:	4a1b      	ldr	r2, [pc, #108]	; (8000424 <gpio_perip_en+0xdc>)
 80003b6:	f043 0310 	orr.w	r3, r3, #16
 80003ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003bc:	e02a      	b.n	8000414 <gpio_perip_en+0xcc>
	else if(pGpiox==GPIOF)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4a1d      	ldr	r2, [pc, #116]	; (8000438 <gpio_perip_en+0xf0>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d106      	bne.n	80003d4 <gpio_perip_en+0x8c>
		GPIOF_CLOCK_ENABLE();
 80003c6:	4b17      	ldr	r3, [pc, #92]	; (8000424 <gpio_perip_en+0xdc>)
 80003c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ca:	4a16      	ldr	r2, [pc, #88]	; (8000424 <gpio_perip_en+0xdc>)
 80003cc:	f043 0320 	orr.w	r3, r3, #32
 80003d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d2:	e01f      	b.n	8000414 <gpio_perip_en+0xcc>
	else if(pGpiox==GPIOG)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a19      	ldr	r2, [pc, #100]	; (800043c <gpio_perip_en+0xf4>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d106      	bne.n	80003ea <gpio_perip_en+0xa2>
		GPIOG_CLOCK_ENABLE();
 80003dc:	4b11      	ldr	r3, [pc, #68]	; (8000424 <gpio_perip_en+0xdc>)
 80003de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e0:	4a10      	ldr	r2, [pc, #64]	; (8000424 <gpio_perip_en+0xdc>)
 80003e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e8:	e014      	b.n	8000414 <gpio_perip_en+0xcc>
	else if(pGpiox==GPIOH)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4a14      	ldr	r2, [pc, #80]	; (8000440 <gpio_perip_en+0xf8>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d106      	bne.n	8000400 <gpio_perip_en+0xb8>
		GPIOH_CLOCK_ENABLE();
 80003f2:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <gpio_perip_en+0xdc>)
 80003f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f6:	4a0b      	ldr	r2, [pc, #44]	; (8000424 <gpio_perip_en+0xdc>)
 80003f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fe:	e009      	b.n	8000414 <gpio_perip_en+0xcc>
	else if(pGpiox==GPIOI)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a10      	ldr	r2, [pc, #64]	; (8000444 <gpio_perip_en+0xfc>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d105      	bne.n	8000414 <gpio_perip_en+0xcc>
		GPIOI_CLOCK_ENABLE();
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <gpio_perip_en+0xdc>)
 800040a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040c:	4a05      	ldr	r2, [pc, #20]	; (8000424 <gpio_perip_en+0xdc>)
 800040e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000412:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000414:	bf00      	nop
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr
 8000420:	40020000 	.word	0x40020000
 8000424:	40023800 	.word	0x40023800
 8000428:	40020400 	.word	0x40020400
 800042c:	40020800 	.word	0x40020800
 8000430:	40020c00 	.word	0x40020c00
 8000434:	40021000 	.word	0x40021000
 8000438:	40021400 	.word	0x40021400
 800043c:	40021800 	.word	0x40021800
 8000440:	40021c00 	.word	0x40021c00
 8000444:	40022000 	.word	0x40022000

08000448 <get_port_code>:


PRIVATE uint8_t get_port_code(const GPIO_RegDef_t * pGpioX){
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	if(pGpioX==GPIOA)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4a1d      	ldr	r2, [pc, #116]	; (80004c8 <get_port_code+0x80>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d101      	bne.n	800045c <get_port_code+0x14>
		return GPIOA_PORT_CODE;
 8000458:	2300      	movs	r3, #0
 800045a:	e02f      	b.n	80004bc <get_port_code+0x74>
	else if(pGpioX==GPIOB)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a1b      	ldr	r2, [pc, #108]	; (80004cc <get_port_code+0x84>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d101      	bne.n	8000468 <get_port_code+0x20>
		return GPIOB_PORT_CODE;
 8000464:	2301      	movs	r3, #1
 8000466:	e029      	b.n	80004bc <get_port_code+0x74>
	else if(pGpioX==GPIOC)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4a19      	ldr	r2, [pc, #100]	; (80004d0 <get_port_code+0x88>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d101      	bne.n	8000474 <get_port_code+0x2c>
		return GPIOC_PORT_CODE;
 8000470:	2302      	movs	r3, #2
 8000472:	e023      	b.n	80004bc <get_port_code+0x74>
	else if(pGpioX==GPIOD)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4a17      	ldr	r2, [pc, #92]	; (80004d4 <get_port_code+0x8c>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d101      	bne.n	8000480 <get_port_code+0x38>
		return GPIOD_PORT_CODE;
 800047c:	2303      	movs	r3, #3
 800047e:	e01d      	b.n	80004bc <get_port_code+0x74>
	else if(pGpioX==GPIOE)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a15      	ldr	r2, [pc, #84]	; (80004d8 <get_port_code+0x90>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d101      	bne.n	800048c <get_port_code+0x44>
		return GPIOE_PORT_CODE;
 8000488:	2304      	movs	r3, #4
 800048a:	e017      	b.n	80004bc <get_port_code+0x74>
	else if(pGpioX==GPIOF)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4a13      	ldr	r2, [pc, #76]	; (80004dc <get_port_code+0x94>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d101      	bne.n	8000498 <get_port_code+0x50>
		return GPIOF_PORT_CODE;
 8000494:	2305      	movs	r3, #5
 8000496:	e011      	b.n	80004bc <get_port_code+0x74>
	else if(pGpioX==GPIOG)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4a11      	ldr	r2, [pc, #68]	; (80004e0 <get_port_code+0x98>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d101      	bne.n	80004a4 <get_port_code+0x5c>
		return GPIOG_PORT_CODE;
 80004a0:	2306      	movs	r3, #6
 80004a2:	e00b      	b.n	80004bc <get_port_code+0x74>
	else if(pGpioX==GPIOH)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4a0f      	ldr	r2, [pc, #60]	; (80004e4 <get_port_code+0x9c>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d101      	bne.n	80004b0 <get_port_code+0x68>
		return GPIOH_PORT_CODE;
 80004ac:	2307      	movs	r3, #7
 80004ae:	e005      	b.n	80004bc <get_port_code+0x74>
	else if(pGpioX==GPIOI)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4a0d      	ldr	r2, [pc, #52]	; (80004e8 <get_port_code+0xa0>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d101      	bne.n	80004bc <get_port_code+0x74>
		return GPIOI_PORT_CODE;
 80004b8:	2308      	movs	r3, #8
 80004ba:	e7ff      	b.n	80004bc <get_port_code+0x74>
}
 80004bc:	4618      	mov	r0, r3
 80004be:	370c      	adds	r7, #12
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr
 80004c8:	40020000 	.word	0x40020000
 80004cc:	40020400 	.word	0x40020400
 80004d0:	40020800 	.word	0x40020800
 80004d4:	40020c00 	.word	0x40020c00
 80004d8:	40021000 	.word	0x40021000
 80004dc:	40021400 	.word	0x40021400
 80004e0:	40021800 	.word	0x40021800
 80004e4:	40021c00 	.word	0x40021c00
 80004e8:	40022000 	.word	0x40022000

080004ec <gpio_init>:

void gpio_init(GPIO_Handle_t * pGpio_handle){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]

	//clock aktif et
	gpio_perip_en(pGpio_handle->pGpioX);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff ff23 	bl	8000348 <gpio_perip_en>
	volatile uint32_t * p_rcc_ahb1_reg=(uint32_t*)(0x40023800+0x30);
	*p_rcc_ahb1_reg |=(1u<<3);
*/

	//pin mode ayarla
	if(pGpio_handle->gPIO_pinConfig.pin_mode<=GPIO_MODE_ANALOG){
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	795b      	ldrb	r3, [r3, #5]
 8000506:	2b03      	cmp	r3, #3
 8000508:	d820      	bhi.n	800054c <gpio_init+0x60>
		temp = (pGpio_handle->gPIO_pinConfig.pin_mode << (2 * pGpio_handle->gPIO_pinConfig.pin_number));
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	795b      	ldrb	r3, [r3, #5]
 800050e:	461a      	mov	r2, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	791b      	ldrb	r3, [r3, #4]
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	fa02 f303 	lsl.w	r3, r2, r3
 800051a:	617b      	str	r3, [r7, #20]
		pGpio_handle->pGpioX->MODER &= ~(0b11<<(2*pGpio_handle->gPIO_pinConfig.pin_number));
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	791b      	ldrb	r3, [r3, #4]
 8000526:	005b      	lsls	r3, r3, #1
 8000528:	2103      	movs	r1, #3
 800052a:	fa01 f303 	lsl.w	r3, r1, r3
 800052e:	43db      	mvns	r3, r3
 8000530:	4619      	mov	r1, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	400a      	ands	r2, r1
 8000538:	601a      	str	r2, [r3, #0]
		pGpio_handle->pGpioX->MODER |=temp;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	6819      	ldr	r1, [r3, #0]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	697a      	ldr	r2, [r7, #20]
 8000546:	430a      	orrs	r2, r1
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	e07c      	b.n	8000646 <gpio_init+0x15a>
	}else{
		//interrupt mode
		if(pGpio_handle->gPIO_pinConfig.pin_mode==GPIO_MODE_FE_IT) //Only falling
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	795b      	ldrb	r3, [r3, #5]
 8000550:	2b04      	cmp	r3, #4
 8000552:	d115      	bne.n	8000580 <gpio_init+0x94>
		{
			EXTI->FTSR |= (1U<<pGpio_handle->gPIO_pinConfig.pin_number); //falling set
 8000554:	4b6d      	ldr	r3, [pc, #436]	; (800070c <gpio_init+0x220>)
 8000556:	68da      	ldr	r2, [r3, #12]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	791b      	ldrb	r3, [r3, #4]
 800055c:	4619      	mov	r1, r3
 800055e:	2301      	movs	r3, #1
 8000560:	408b      	lsls	r3, r1
 8000562:	496a      	ldr	r1, [pc, #424]	; (800070c <gpio_init+0x220>)
 8000564:	4313      	orrs	r3, r2
 8000566:	60cb      	str	r3, [r1, #12]
			EXTI->RTSR &= ~(1U<<pGpio_handle->gPIO_pinConfig.pin_number);//rising reset
 8000568:	4b68      	ldr	r3, [pc, #416]	; (800070c <gpio_init+0x220>)
 800056a:	689a      	ldr	r2, [r3, #8]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	791b      	ldrb	r3, [r3, #4]
 8000570:	4619      	mov	r1, r3
 8000572:	2301      	movs	r3, #1
 8000574:	408b      	lsls	r3, r1
 8000576:	43db      	mvns	r3, r3
 8000578:	4964      	ldr	r1, [pc, #400]	; (800070c <gpio_init+0x220>)
 800057a:	4013      	ands	r3, r2
 800057c:	608b      	str	r3, [r1, #8]
 800057e:	e031      	b.n	80005e4 <gpio_init+0xf8>
		}
		else if(pGpio_handle->gPIO_pinConfig.pin_mode==GPIO_MODE_RE_IT) // only rising
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	795b      	ldrb	r3, [r3, #5]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d115      	bne.n	80005b4 <gpio_init+0xc8>
		{
			EXTI->RTSR |= (1U<<pGpio_handle->gPIO_pinConfig.pin_number);//rising set
 8000588:	4b60      	ldr	r3, [pc, #384]	; (800070c <gpio_init+0x220>)
 800058a:	689a      	ldr	r2, [r3, #8]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	791b      	ldrb	r3, [r3, #4]
 8000590:	4619      	mov	r1, r3
 8000592:	2301      	movs	r3, #1
 8000594:	408b      	lsls	r3, r1
 8000596:	495d      	ldr	r1, [pc, #372]	; (800070c <gpio_init+0x220>)
 8000598:	4313      	orrs	r3, r2
 800059a:	608b      	str	r3, [r1, #8]
			EXTI->FTSR &= ~(1U<<pGpio_handle->gPIO_pinConfig.pin_number);//falling reset
 800059c:	4b5b      	ldr	r3, [pc, #364]	; (800070c <gpio_init+0x220>)
 800059e:	68da      	ldr	r2, [r3, #12]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	791b      	ldrb	r3, [r3, #4]
 80005a4:	4619      	mov	r1, r3
 80005a6:	2301      	movs	r3, #1
 80005a8:	408b      	lsls	r3, r1
 80005aa:	43db      	mvns	r3, r3
 80005ac:	4957      	ldr	r1, [pc, #348]	; (800070c <gpio_init+0x220>)
 80005ae:	4013      	ands	r3, r2
 80005b0:	60cb      	str	r3, [r1, #12]
 80005b2:	e017      	b.n	80005e4 <gpio_init+0xf8>
		}
		else if(pGpio_handle->gPIO_pinConfig.pin_mode==GPIO_MODE_FRE_IT) // falling + rising
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	795b      	ldrb	r3, [r3, #5]
 80005b8:	2b06      	cmp	r3, #6
 80005ba:	d113      	bne.n	80005e4 <gpio_init+0xf8>
		{
			EXTI->RTSR |= (1U <<pGpio_handle->gPIO_pinConfig.pin_number); //rising set
 80005bc:	4b53      	ldr	r3, [pc, #332]	; (800070c <gpio_init+0x220>)
 80005be:	689a      	ldr	r2, [r3, #8]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	791b      	ldrb	r3, [r3, #4]
 80005c4:	4619      	mov	r1, r3
 80005c6:	2301      	movs	r3, #1
 80005c8:	408b      	lsls	r3, r1
 80005ca:	4950      	ldr	r1, [pc, #320]	; (800070c <gpio_init+0x220>)
 80005cc:	4313      	orrs	r3, r2
 80005ce:	608b      	str	r3, [r1, #8]
			EXTI->FTSR |= (1U <<pGpio_handle->gPIO_pinConfig.pin_number); //falling set
 80005d0:	4b4e      	ldr	r3, [pc, #312]	; (800070c <gpio_init+0x220>)
 80005d2:	68da      	ldr	r2, [r3, #12]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	791b      	ldrb	r3, [r3, #4]
 80005d8:	4619      	mov	r1, r3
 80005da:	2301      	movs	r3, #1
 80005dc:	408b      	lsls	r3, r1
 80005de:	494b      	ldr	r1, [pc, #300]	; (800070c <gpio_init+0x220>)
 80005e0:	4313      	orrs	r3, r2
 80005e2:	60cb      	str	r3, [r1, #12]
		}
		//used port pin selection by SYSCF_EXTICRx
		SYSCFG_CLOCK_ENABLE();
 80005e4:	4b4a      	ldr	r3, [pc, #296]	; (8000710 <gpio_init+0x224>)
 80005e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005e8:	4a49      	ldr	r2, [pc, #292]	; (8000710 <gpio_init+0x224>)
 80005ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ee:	6453      	str	r3, [r2, #68]	; 0x44
		uint32_t syscfgr_exti_reg_no = pGpio_handle->gPIO_pinConfig.pin_number / 4;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	791b      	ldrb	r3, [r3, #4]
 80005f4:	089b      	lsrs	r3, r3, #2
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	613b      	str	r3, [r7, #16]
		uint32_t syscfgr_exti_reg_bit_no = pGpio_handle->gPIO_pinConfig.pin_number % 4;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	791b      	ldrb	r3, [r3, #4]
 80005fe:	f003 0303 	and.w	r3, r3, #3
 8000602:	60fb      	str	r3, [r7, #12]
		uint8_t port_code = get_port_code(pGpio_handle->pGpioX);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff ff1d 	bl	8000448 <get_port_code>
 800060e:	4603      	mov	r3, r0
 8000610:	72fb      	strb	r3, [r7, #11]
		SYSCFG->EXTICR[syscfgr_exti_reg_no] |= (1u<<(syscfgr_exti_reg_bit_no*4));
 8000612:	4a40      	ldr	r2, [pc, #256]	; (8000714 <gpio_init+0x228>)
 8000614:	693b      	ldr	r3, [r7, #16]
 8000616:	3302      	adds	r3, #2
 8000618:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	2101      	movs	r1, #1
 8000622:	fa01 f303 	lsl.w	r3, r1, r3
 8000626:	493b      	ldr	r1, [pc, #236]	; (8000714 <gpio_init+0x228>)
 8000628:	431a      	orrs	r2, r3
 800062a:	693b      	ldr	r3, [r7, #16]
 800062c:	3302      	adds	r3, #2
 800062e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//Enable IMR
		EXTI->IMR |= (1u<<pGpio_handle->gPIO_pinConfig.pin_number);
 8000632:	4b36      	ldr	r3, [pc, #216]	; (800070c <gpio_init+0x220>)
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	791b      	ldrb	r3, [r3, #4]
 800063a:	4619      	mov	r1, r3
 800063c:	2301      	movs	r3, #1
 800063e:	408b      	lsls	r3, r1
 8000640:	4932      	ldr	r1, [pc, #200]	; (800070c <gpio_init+0x220>)
 8000642:	4313      	orrs	r3, r2
 8000644:	600b      	str	r3, [r1, #0]
		//NVIC
	}

	//speed ayarla
	temp = (pGpio_handle->gPIO_pinConfig.pin_speed << (2 * pGpio_handle->gPIO_pinConfig.pin_number));
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	799b      	ldrb	r3, [r3, #6]
 800064a:	461a      	mov	r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	791b      	ldrb	r3, [r3, #4]
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	fa02 f303 	lsl.w	r3, r2, r3
 8000656:	617b      	str	r3, [r7, #20]
	pGpio_handle->pGpioX->OSPEEDR &= ~(0b11<<(2*pGpio_handle->gPIO_pinConfig.pin_number));
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	689a      	ldr	r2, [r3, #8]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	791b      	ldrb	r3, [r3, #4]
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	2103      	movs	r1, #3
 8000666:	fa01 f303 	lsl.w	r3, r1, r3
 800066a:	43db      	mvns	r3, r3
 800066c:	4619      	mov	r1, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	400a      	ands	r2, r1
 8000674:	609a      	str	r2, [r3, #8]
	pGpio_handle->pGpioX->OSPEEDR |=temp;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	6899      	ldr	r1, [r3, #8]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	697a      	ldr	r2, [r7, #20]
 8000682:	430a      	orrs	r2, r1
 8000684:	609a      	str	r2, [r3, #8]

	//pull up pull down ayarla
	temp = (pGpio_handle->gPIO_pinConfig.pin_pupd << (2 * pGpio_handle->gPIO_pinConfig.pin_number));
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	7a1b      	ldrb	r3, [r3, #8]
 800068a:	461a      	mov	r2, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	791b      	ldrb	r3, [r3, #4]
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	fa02 f303 	lsl.w	r3, r2, r3
 8000696:	617b      	str	r3, [r7, #20]
	pGpio_handle->pGpioX->PUPDR &= ~(0b11<<(2*pGpio_handle->gPIO_pinConfig.pin_number));
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	68da      	ldr	r2, [r3, #12]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	791b      	ldrb	r3, [r3, #4]
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	2103      	movs	r1, #3
 80006a6:	fa01 f303 	lsl.w	r3, r1, r3
 80006aa:	43db      	mvns	r3, r3
 80006ac:	4619      	mov	r1, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	400a      	ands	r2, r1
 80006b4:	60da      	str	r2, [r3, #12]
	pGpio_handle->pGpioX->PUPDR |=temp;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	68d9      	ldr	r1, [r3, #12]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	697a      	ldr	r2, [r7, #20]
 80006c2:	430a      	orrs	r2, r1
 80006c4:	60da      	str	r2, [r3, #12]

	//otype ayarla
	temp = (pGpio_handle->gPIO_pinConfig.pin_otype << (pGpio_handle->gPIO_pinConfig.pin_number));
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	79db      	ldrb	r3, [r3, #7]
 80006ca:	461a      	mov	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	791b      	ldrb	r3, [r3, #4]
 80006d0:	fa02 f303 	lsl.w	r3, r2, r3
 80006d4:	617b      	str	r3, [r7, #20]
	pGpio_handle->pGpioX->OTYPER &= ~(0b1<<(pGpio_handle->gPIO_pinConfig.pin_number));
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	685a      	ldr	r2, [r3, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	791b      	ldrb	r3, [r3, #4]
 80006e0:	4619      	mov	r1, r3
 80006e2:	2301      	movs	r3, #1
 80006e4:	408b      	lsls	r3, r1
 80006e6:	43db      	mvns	r3, r3
 80006e8:	4619      	mov	r1, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	400a      	ands	r2, r1
 80006f0:	605a      	str	r2, [r3, #4]
	pGpio_handle->pGpioX->OTYPER |=temp;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	6859      	ldr	r1, [r3, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	697a      	ldr	r2, [r7, #20]
 80006fe:	430a      	orrs	r2, r1
 8000700:	605a      	str	r2, [r3, #4]
	//bi portun pinine 1 mi 0 mı yazacağız....




}
 8000702:	bf00      	nop
 8000704:	3718      	adds	r7, #24
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40013c00 	.word	0x40013c00
 8000710:	40023800 	.word	0x40023800
 8000714:	40013800 	.word	0x40013800

08000718 <gpio_writeto_output_pin>:


void  gpio_writeto_output_pin(GPIO_RegDef_t *pGpiox ,uint8_t pin_no, uint8_t val){
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	460b      	mov	r3, r1
 8000722:	70fb      	strb	r3, [r7, #3]
 8000724:	4613      	mov	r3, r2
 8000726:	70bb      	strb	r3, [r7, #2]

	if(val==GPIO_PIN_SET)
 8000728:	78bb      	ldrb	r3, [r7, #2]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d109      	bne.n	8000742 <gpio_writeto_output_pin+0x2a>
		pGpiox->ODR |= (1u<<pin_no);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	695a      	ldr	r2, [r3, #20]
 8000732:	78fb      	ldrb	r3, [r7, #3]
 8000734:	2101      	movs	r1, #1
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	431a      	orrs	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	615a      	str	r2, [r3, #20]
	else
		pGpiox->ODR &=~ (1u<<pin_no);


}
 8000740:	e009      	b.n	8000756 <gpio_writeto_output_pin+0x3e>
		pGpiox->ODR &=~ (1u<<pin_no);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	695a      	ldr	r2, [r3, #20]
 8000746:	78fb      	ldrb	r3, [r7, #3]
 8000748:	2101      	movs	r1, #1
 800074a:	fa01 f303 	lsl.w	r3, r1, r3
 800074e:	43db      	mvns	r3, r3
 8000750:	401a      	ands	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	615a      	str	r2, [r3, #20]
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <gpio_toggleto_output_pin>:
	pGpiox->ODR=val; //bitsel olarak değil direk data olarak yazıyoruz.

}


void gpio_toggleto_output_pin(GPIO_RegDef_t *pGpiox ,uint8_t pin_no){
 8000762:	b480      	push	{r7}
 8000764:	b083      	sub	sp, #12
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
 800076a:	460b      	mov	r3, r1
 800076c:	70fb      	strb	r3, [r7, #3]
	pGpiox->ODR ^=(1u<<pin_no);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	695a      	ldr	r2, [r3, #20]
 8000772:	78fb      	ldrb	r3, [r7, #3]
 8000774:	2101      	movs	r1, #1
 8000776:	fa01 f303 	lsl.w	r3, r1, r3
 800077a:	405a      	eors	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	615a      	str	r2, [r3, #20]

}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <clear_pending_reg>:
	return res!= 0? GPIO_PIN_SET : GPIO_PIN_RESET;
}



void clear_pending_reg(uint8_t pin_no){
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
	//clear PR
	if(EXTI->PR & (1<<pin_no))
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <clear_pending_reg+0x3c>)
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	79fa      	ldrb	r2, [r7, #7]
 800079c:	2101      	movs	r1, #1
 800079e:	fa01 f202 	lsl.w	r2, r1, r2
 80007a2:	4013      	ands	r3, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d008      	beq.n	80007ba <clear_pending_reg+0x2e>
		EXTI->PR |= (1U<<pin_no);
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <clear_pending_reg+0x3c>)
 80007aa:	695a      	ldr	r2, [r3, #20]
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	2101      	movs	r1, #1
 80007b0:	fa01 f303 	lsl.w	r3, r1, r3
 80007b4:	4904      	ldr	r1, [pc, #16]	; (80007c8 <clear_pending_reg+0x3c>)
 80007b6:	4313      	orrs	r3, r2
 80007b8:	614b      	str	r3, [r1, #20]
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40013c00 	.word	0x40013c00

080007cc <EXTI0_IRQHandler>:
#define BTN_RELEASED 0

uint32_t g_random_number;


void EXTI0_IRQHandler(void){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	mini_delay();
 80007d0:	f000 fa62 	bl	8000c98 <mini_delay>
	clear_pending_reg(GPIO_PIN_NO_0);
 80007d4:	2000      	movs	r0, #0
 80007d6:	f7ff ffd9 	bl	800078c <clear_pending_reg>
	gpio_toggleto_output_pin(GPIOD, GPIO_PIN_NO_15);
 80007da:	210f      	movs	r1, #15
 80007dc:	4802      	ldr	r0, [pc, #8]	; (80007e8 <EXTI0_IRQHandler+0x1c>)
 80007de:	f7ff ffc0 	bl	8000762 <gpio_toggleto_output_pin>
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40020c00 	.word	0x40020c00

080007ec <task_led>:



void task_led(){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	}state=S_LED_OFF;

	static clock_t t0; //duruma ilk giriş sati
	static clock_t t1; //güncel giriş saati

	t1 = clock();
 80007f0:	f7ff fd9e 	bl	8000330 <clock>
 80007f4:	4603      	mov	r3, r0
 80007f6:	4a1c      	ldr	r2, [pc, #112]	; (8000868 <task_led+0x7c>)
 80007f8:	6013      	str	r3, [r2, #0]

	switch(state){
 80007fa:	4b1c      	ldr	r3, [pc, #112]	; (800086c <task_led+0x80>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d002      	beq.n	8000808 <task_led+0x1c>
 8000802:	2b01      	cmp	r3, #1
 8000804:	d015      	beq.n	8000832 <task_led+0x46>
			t0=t1;
			state=S_LED_OFF;
		}
		break;
	}
}
 8000806:	e02c      	b.n	8000862 <task_led+0x76>
		if(t1>=t0+800)
 8000808:	4b19      	ldr	r3, [pc, #100]	; (8000870 <task_led+0x84>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f503 7248 	add.w	r2, r3, #800	; 0x320
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <task_led+0x7c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	429a      	cmp	r2, r3
 8000816:	d821      	bhi.n	800085c <task_led+0x70>
			gpio_writeto_output_pin(GPIOD,GPIO_PIN_NO_15,GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	210f      	movs	r1, #15
 800081c:	4815      	ldr	r0, [pc, #84]	; (8000874 <task_led+0x88>)
 800081e:	f7ff ff7b 	bl	8000718 <gpio_writeto_output_pin>
			t0=t1;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <task_led+0x7c>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a12      	ldr	r2, [pc, #72]	; (8000870 <task_led+0x84>)
 8000828:	6013      	str	r3, [r2, #0]
			state=S_LED_ON;
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <task_led+0x80>)
 800082c:	2201      	movs	r2, #1
 800082e:	701a      	strb	r2, [r3, #0]
		break;
 8000830:	e014      	b.n	800085c <task_led+0x70>
		if(t1>=t0+200){
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <task_led+0x84>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <task_led+0x7c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	429a      	cmp	r2, r3
 8000840:	d80e      	bhi.n	8000860 <task_led+0x74>
			gpio_writeto_output_pin(GPIOD, GPIO_PIN_NO_15, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	210f      	movs	r1, #15
 8000846:	480b      	ldr	r0, [pc, #44]	; (8000874 <task_led+0x88>)
 8000848:	f7ff ff66 	bl	8000718 <gpio_writeto_output_pin>
			t0=t1;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <task_led+0x7c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a07      	ldr	r2, [pc, #28]	; (8000870 <task_led+0x84>)
 8000852:	6013      	str	r3, [r2, #0]
			state=S_LED_OFF;
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <task_led+0x80>)
 8000856:	2200      	movs	r2, #0
 8000858:	701a      	strb	r2, [r3, #0]
		break;
 800085a:	e001      	b.n	8000860 <task_led+0x74>
		break;
 800085c:	bf00      	nop
 800085e:	e000      	b.n	8000862 <task_led+0x76>
		break;
 8000860:	bf00      	nop
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000040 	.word	0x20000040
 800086c:	20000044 	.word	0x20000044
 8000870:	20000048 	.word	0x20000048
 8000874:	40020c00 	.word	0x40020c00

08000878 <main>:


int main(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b090      	sub	sp, #64	; 0x40
 800087c:	af00      	add	r7, sp, #0
	gpio_init(&user_button);
	nvic_irqno_enable(IRQ_EXTI0);
**/
	//rng_init();

	GPIO_Handle_t Gpio_pd_blue={GPIOD,{GPIO_PIN_NO_15,GPIO_MODE_OUT,GPIO_SPEED_MEDIUM,GPIO_OTYPE_PP,GPIO_NO_PUPD}};
 800087e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	4b3b      	ldr	r3, [pc, #236]	; (8000978 <main+0x100>)
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
 800088e:	230f      	movs	r3, #15
 8000890:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000894:	2301      	movs	r3, #1
 8000896:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800089a:	2301      	movs	r3, #1
 800089c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	GPIO_Handle_t Gpio_pd_red={GPIOD,{GPIO_PIN_NO_14,GPIO_MODE_OUT,GPIO_SPEED_MEDIUM,GPIO_OTYPE_PP,GPIO_NO_PUPD}};
 80008a0:	f107 0318 	add.w	r3, r7, #24
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	4b32      	ldr	r3, [pc, #200]	; (8000978 <main+0x100>)
 80008ae:	61bb      	str	r3, [r7, #24]
 80008b0:	230e      	movs	r3, #14
 80008b2:	773b      	strb	r3, [r7, #28]
 80008b4:	2301      	movs	r3, #1
 80008b6:	777b      	strb	r3, [r7, #29]
 80008b8:	2301      	movs	r3, #1
 80008ba:	77bb      	strb	r3, [r7, #30]
	GPIO_Handle_t Gpio_pd_orange={GPIOD,{GPIO_PIN_NO_13,GPIO_MODE_OUT,GPIO_SPEED_MEDIUM,GPIO_OTYPE_PP,GPIO_NO_PUPD}};
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <main+0x100>)
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	230d      	movs	r3, #13
 80008ce:	743b      	strb	r3, [r7, #16]
 80008d0:	2301      	movs	r3, #1
 80008d2:	747b      	strb	r3, [r7, #17]
 80008d4:	2301      	movs	r3, #1
 80008d6:	74bb      	strb	r3, [r7, #18]
	GPIO_Handle_t Gpio_pd_green={GPIOD,{GPIO_PIN_NO_12,GPIO_MODE_OUT,GPIO_SPEED_MEDIUM,GPIO_OTYPE_PP,GPIO_NO_PUPD}};
 80008d8:	463b      	mov	r3, r7
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	4b25      	ldr	r3, [pc, #148]	; (8000978 <main+0x100>)
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	230c      	movs	r3, #12
 80008e8:	713b      	strb	r3, [r7, #4]
 80008ea:	2301      	movs	r3, #1
 80008ec:	717b      	strb	r3, [r7, #5]
 80008ee:	2301      	movs	r3, #1
 80008f0:	71bb      	strb	r3, [r7, #6]

	gpio_init(&Gpio_pd_blue);
 80008f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fdf8 	bl	80004ec <gpio_init>
	gpio_init(&Gpio_pd_green);
 80008fc:	463b      	mov	r3, r7
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fdf4 	bl	80004ec <gpio_init>
	gpio_init(&Gpio_pd_red);
 8000904:	f107 0318 	add.w	r3, r7, #24
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff fdef 	bl	80004ec <gpio_init>
	gpio_init(&Gpio_pd_orange);
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fdea 	bl	80004ec <gpio_init>

	systick_config(SYSTEM_FREQ/1000); //1ms de bi systic kesme
 8000918:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 800091c:	f7ff fcd4 	bl	80002c8 <systick_config>

	//lcd_init();
	//lcd_print_char('a');
	//lcd_print_string("baris");

	gpio_writeto_output_pin(GPIOD, GPIO_PIN_NO_14, GPIO_PIN_SET);
 8000920:	2201      	movs	r2, #1
 8000922:	210e      	movs	r1, #14
 8000924:	4814      	ldr	r0, [pc, #80]	; (8000978 <main+0x100>)
 8000926:	f7ff fef7 	bl	8000718 <gpio_writeto_output_pin>
	//timer_init(TIMER_6,16000,16000,0);
	timer_init(TIMER_6,SYSTEM_FREQ/2000,2000,0);
 800092a:	2300      	movs	r3, #0
 800092c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000930:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8000934:	2005      	movs	r0, #5
 8000936:	f000 f913 	bl	8000b60 <timer_init>
	timer_interrupt_config(TIMER_6);
 800093a:	2005      	movs	r0, #5
 800093c:	f000 f978 	bl	8000c30 <timer_interrupt_config>
    while(1)
    {
    	//delay();
    	//toggle_board_random_leds();
    	task_led();
 8000940:	f7ff ff54 	bl	80007ec <task_led>
    	int a=0;
 8000944:	2300      	movs	r3, #0
 8000946:	63fb      	str	r3, [r7, #60]	; 0x3c
    	int b=0;
 8000948:	2300      	movs	r3, #0
 800094a:	63bb      	str	r3, [r7, #56]	; 0x38
    	int n=0;
 800094c:	2300      	movs	r3, #0
 800094e:	637b      	str	r3, [r7, #52]	; 0x34
    	int m=0;
 8000950:	2300      	movs	r3, #0
 8000952:	633b      	str	r3, [r7, #48]	; 0x30
    	//timer_reset(TIMER_6);
    	timer_start(TIMER_6, TIMER_STOP);
 8000954:	2100      	movs	r1, #0
 8000956:	2005      	movs	r0, #5
 8000958:	f000 f944 	bl	8000be4 <timer_start>
    	m++;
 800095c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800095e:	3301      	adds	r3, #1
 8000960:	633b      	str	r3, [r7, #48]	; 0x30
    	b++;
 8000962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000964:	3301      	adds	r3, #1
 8000966:	63bb      	str	r3, [r7, #56]	; 0x38
    	n++;
 8000968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800096a:	3301      	adds	r3, #1
 800096c:	637b      	str	r3, [r7, #52]	; 0x34
    	timer_start(TIMER_6, TIMER_START);
 800096e:	2101      	movs	r1, #1
 8000970:	2005      	movs	r0, #5
 8000972:	f000 f937 	bl	8000be4 <timer_start>
    {
 8000976:	e7e3      	b.n	8000940 <main+0xc8>
 8000978:	40020c00 	.word	0x40020c00

0800097c <HASH_RNG_IRQHandler>:
	nvic_irqno_enable(IRQ_HASH_RNG);

}


void HASH_RNG_IRQHandler(void){
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
	if(((RNG->SR & RNG_CEIS)==0) && ((RNG->SR & RNG_SEIS)==0) && ((RNG->SR & RNG_DRDY)==1))
 8000980:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <HASH_RNG_IRQHandler+0xa8>)
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f003 0320 	and.w	r3, r3, #32
 8000988:	2b00      	cmp	r3, #0
 800098a:	d11b      	bne.n	80009c4 <HASH_RNG_IRQHandler+0x48>
 800098c:	4b25      	ldr	r3, [pc, #148]	; (8000a24 <HASH_RNG_IRQHandler+0xa8>)
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000994:	2b00      	cmp	r3, #0
 8000996:	d115      	bne.n	80009c4 <HASH_RNG_IRQHandler+0x48>
 8000998:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <HASH_RNG_IRQHandler+0xa8>)
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d10f      	bne.n	80009c4 <HASH_RNG_IRQHandler+0x48>
	{
		//g_random_number = RNG->DR;
		RNG->CR &= ~IE;
 80009a4:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <HASH_RNG_IRQHandler+0xa8>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a1e      	ldr	r2, [pc, #120]	; (8000a24 <HASH_RNG_IRQHandler+0xa8>)
 80009aa:	f023 0308 	bic.w	r3, r3, #8
 80009ae:	6013      	str	r3, [r2, #0]
		RNG->CR &= ~RNGEN;
 80009b0:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <HASH_RNG_IRQHandler+0xa8>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a1b      	ldr	r2, [pc, #108]	; (8000a24 <HASH_RNG_IRQHandler+0xa8>)
 80009b6:	f023 0304 	bic.w	r3, r3, #4
 80009ba:	6013      	str	r3, [r2, #0]
		nvic_irqno_disable(IRQ_HASH_RNG);
 80009bc:	2050      	movs	r0, #80	; 0x50
 80009be:	f7ff fc4b 	bl	8000258 <nvic_irqno_disable>
 80009c2:	e02d      	b.n	8000a20 <HASH_RNG_IRQHandler+0xa4>
	}else {//hatalı durum düzeltme

		if((RNG->SR & RNG_CEIS)==1){
 80009c4:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <HASH_RNG_IRQHandler+0xa8>)
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f003 0320 	and.w	r3, r3, #32
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d105      	bne.n	80009dc <HASH_RNG_IRQHandler+0x60>
			RNG->CR &= ~RNG_CEIS;
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <HASH_RNG_IRQHandler+0xa8>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a13      	ldr	r2, [pc, #76]	; (8000a24 <HASH_RNG_IRQHandler+0xa8>)
 80009d6:	f023 0320 	bic.w	r3, r3, #32
 80009da:	6013      	str	r3, [r2, #0]
		}
		if((RNG->SR & RNG_SEIS)==1){
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <HASH_RNG_IRQHandler+0xa8>)
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d105      	bne.n	80009f4 <HASH_RNG_IRQHandler+0x78>
			RNG->CR &= ~RNG_SEIS;
 80009e8:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <HASH_RNG_IRQHandler+0xa8>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a0d      	ldr	r2, [pc, #52]	; (8000a24 <HASH_RNG_IRQHandler+0xa8>)
 80009ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80009f2:	6013      	str	r3, [r2, #0]
		}
		//resetle ve yeniden başlat
		RCC->AHB2STR = RNGRST;//resetleme ayarı ama bi alttaki satırdaki gibi tekrar açmazsan kapalı kalır.
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <HASH_RNG_IRQHandler+0xac>)
 80009f6:	2240      	movs	r2, #64	; 0x40
 80009f8:	615a      	str	r2, [r3, #20]
		RCC->AHB2STR &= ~RNGRST;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <HASH_RNG_IRQHandler+0xac>)
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <HASH_RNG_IRQHandler+0xac>)
 8000a00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a04:	6153      	str	r3, [r2, #20]
		RNG->CR |= RNGEN;
 8000a06:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <HASH_RNG_IRQHandler+0xa8>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a06      	ldr	r2, [pc, #24]	; (8000a24 <HASH_RNG_IRQHandler+0xa8>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	6013      	str	r3, [r2, #0]
		RNG->CR |= IE;
 8000a12:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <HASH_RNG_IRQHandler+0xa8>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a03      	ldr	r2, [pc, #12]	; (8000a24 <HASH_RNG_IRQHandler+0xa8>)
 8000a18:	f043 0308 	orr.w	r3, r3, #8
 8000a1c:	6013      	str	r3, [r2, #0]
	}




}
 8000a1e:	bf00      	nop
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	50060800 	.word	0x50060800
 8000a28:	40023800 	.word	0x40023800

08000a2c <timer_clock_enable>:
 */
#include "timer.h"

TIM_RegDef_t * timTab[]={TIMER1,TIMER2,TIMER3,TIMER4,TIMER5,TIMER6,TIMER7,TIMER8};

static timer_clock_enable(TIM_RegDef_t * pTimerX){
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	if(pTimerX==TIMER1)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a3f      	ldr	r2, [pc, #252]	; (8000b34 <timer_clock_enable+0x108>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d106      	bne.n	8000a4a <timer_clock_enable+0x1e>
		TIMER1_CLOCK_ENABLE();
 8000a3c:	4b3e      	ldr	r3, [pc, #248]	; (8000b38 <timer_clock_enable+0x10c>)
 8000a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a40:	4a3d      	ldr	r2, [pc, #244]	; (8000b38 <timer_clock_enable+0x10c>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	6453      	str	r3, [r2, #68]	; 0x44
 8000a48:	e06c      	b.n	8000b24 <timer_clock_enable+0xf8>
		else if(pTimerX==TIMER8)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a3b      	ldr	r2, [pc, #236]	; (8000b3c <timer_clock_enable+0x110>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d106      	bne.n	8000a60 <timer_clock_enable+0x34>
			TIMER8_CLOCK_ENABLE();
 8000a52:	4b39      	ldr	r3, [pc, #228]	; (8000b38 <timer_clock_enable+0x10c>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	4a38      	ldr	r2, [pc, #224]	; (8000b38 <timer_clock_enable+0x10c>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5e:	e061      	b.n	8000b24 <timer_clock_enable+0xf8>
		else if(pTimerX==TIMER9)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a37      	ldr	r2, [pc, #220]	; (8000b40 <timer_clock_enable+0x114>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d106      	bne.n	8000a76 <timer_clock_enable+0x4a>
			TIMER9_CLOCK_ENABLE();
 8000a68:	4b33      	ldr	r3, [pc, #204]	; (8000b38 <timer_clock_enable+0x10c>)
 8000a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6c:	4a32      	ldr	r2, [pc, #200]	; (8000b38 <timer_clock_enable+0x10c>)
 8000a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a72:	6453      	str	r3, [r2, #68]	; 0x44
 8000a74:	e056      	b.n	8000b24 <timer_clock_enable+0xf8>
		else if(pTimerX==TIMER10)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4a32      	ldr	r2, [pc, #200]	; (8000b44 <timer_clock_enable+0x118>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d106      	bne.n	8000a8c <timer_clock_enable+0x60>
			TIMER10_CLOCK_ENABLE();
 8000a7e:	4b2e      	ldr	r3, [pc, #184]	; (8000b38 <timer_clock_enable+0x10c>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	4a2d      	ldr	r2, [pc, #180]	; (8000b38 <timer_clock_enable+0x10c>)
 8000a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a88:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8a:	e04b      	b.n	8000b24 <timer_clock_enable+0xf8>
		else if(pTimerX==TIMER11)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a2e      	ldr	r2, [pc, #184]	; (8000b48 <timer_clock_enable+0x11c>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d106      	bne.n	8000aa2 <timer_clock_enable+0x76>
			TIMER11_CLOCK_ENABLE();
 8000a94:	4b28      	ldr	r3, [pc, #160]	; (8000b38 <timer_clock_enable+0x10c>)
 8000a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a98:	4a27      	ldr	r2, [pc, #156]	; (8000b38 <timer_clock_enable+0x10c>)
 8000a9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a9e:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa0:	e040      	b.n	8000b24 <timer_clock_enable+0xf8>
		else if(pTimerX==TIMER2)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aa8:	d106      	bne.n	8000ab8 <timer_clock_enable+0x8c>
			TIMER2_CLOCK_ENABLE();
 8000aaa:	4b23      	ldr	r3, [pc, #140]	; (8000b38 <timer_clock_enable+0x10c>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	4a22      	ldr	r2, [pc, #136]	; (8000b38 <timer_clock_enable+0x10c>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab6:	e035      	b.n	8000b24 <timer_clock_enable+0xf8>
		else if(pTimerX==TIMER3)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a24      	ldr	r2, [pc, #144]	; (8000b4c <timer_clock_enable+0x120>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d106      	bne.n	8000ace <timer_clock_enable+0xa2>
			TIMER3_CLOCK_ENABLE();
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <timer_clock_enable+0x10c>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	4a1c      	ldr	r2, [pc, #112]	; (8000b38 <timer_clock_enable+0x10c>)
 8000ac6:	f043 0302 	orr.w	r3, r3, #2
 8000aca:	6413      	str	r3, [r2, #64]	; 0x40
 8000acc:	e02a      	b.n	8000b24 <timer_clock_enable+0xf8>
		else if(pTimerX==TIMER4)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a1f      	ldr	r2, [pc, #124]	; (8000b50 <timer_clock_enable+0x124>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d106      	bne.n	8000ae4 <timer_clock_enable+0xb8>
			TIMER4_CLOCK_ENABLE();
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <timer_clock_enable+0x10c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a17      	ldr	r2, [pc, #92]	; (8000b38 <timer_clock_enable+0x10c>)
 8000adc:	f043 0304 	orr.w	r3, r3, #4
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	e01f      	b.n	8000b24 <timer_clock_enable+0xf8>
		else if(pTimerX==TIMER5)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a1b      	ldr	r2, [pc, #108]	; (8000b54 <timer_clock_enable+0x128>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d106      	bne.n	8000afa <timer_clock_enable+0xce>
			TIMER5_CLOCK_ENABLE();
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <timer_clock_enable+0x10c>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	4a11      	ldr	r2, [pc, #68]	; (8000b38 <timer_clock_enable+0x10c>)
 8000af2:	f043 0308 	orr.w	r3, r3, #8
 8000af6:	6413      	str	r3, [r2, #64]	; 0x40
 8000af8:	e014      	b.n	8000b24 <timer_clock_enable+0xf8>
		else if(pTimerX==TIMER6)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a16      	ldr	r2, [pc, #88]	; (8000b58 <timer_clock_enable+0x12c>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d106      	bne.n	8000b10 <timer_clock_enable+0xe4>
			TIMER6_CLOCK_ENABLE();
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <timer_clock_enable+0x10c>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	4a0c      	ldr	r2, [pc, #48]	; (8000b38 <timer_clock_enable+0x10c>)
 8000b08:	f043 0310 	orr.w	r3, r3, #16
 8000b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0e:	e009      	b.n	8000b24 <timer_clock_enable+0xf8>
		else if(pTimerX==TIMER7)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <timer_clock_enable+0x130>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d105      	bne.n	8000b24 <timer_clock_enable+0xf8>
			TIMER7_CLOCK_ENABLE();
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <timer_clock_enable+0x10c>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	4a06      	ldr	r2, [pc, #24]	; (8000b38 <timer_clock_enable+0x10c>)
 8000b1e:	f043 0320 	orr.w	r3, r3, #32
 8000b22:	6413      	str	r3, [r2, #64]	; 0x40
	}
 8000b24:	bf00      	nop
 8000b26:	4618      	mov	r0, r3
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40010000 	.word	0x40010000
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40010400 	.word	0x40010400
 8000b40:	40014000 	.word	0x40014000
 8000b44:	40014400 	.word	0x40014400
 8000b48:	40014800 	.word	0x40014800
 8000b4c:	40000400 	.word	0x40000400
 8000b50:	40000800 	.word	0x40000800
 8000b54:	40000c00 	.word	0x40000c00
 8000b58:	40001000 	.word	0x40001000
 8000b5c:	40001400 	.word	0x40001400

08000b60 <timer_init>:


void timer_init(TIMNO e_timer_no, unsigned prescaler, unsigned period, unsigned repeat){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	73fb      	strb	r3, [r7, #15]

	//clock enable
	timer_clock_enable(timTab[e_timer_no]); // timer çevreselin clocku
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	4a10      	ldr	r2, [pc, #64]	; (8000bb4 <timer_init+0x54>)
 8000b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ff57 	bl	8000a2c <timer_clock_enable>

	//APB2 ve APB1 hatları (timer 1,8,9,10,11)

	TIM_RegDef_t *p= timTab[e_timer_no];
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	4a0c      	ldr	r2, [pc, #48]	; (8000bb4 <timer_init+0x54>)
 8000b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b86:	617b      	str	r3, [r7, #20]
	p->ARR=period-1;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	1e5a      	subs	r2, r3, #1
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	62da      	str	r2, [r3, #44]	; 0x2c
	p->PSC=prescaler-1;
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	1e5a      	subs	r2, r3, #1
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	629a      	str	r2, [r3, #40]	; 0x28

	//if kontrolü yapıp advance timer ise kullan
	//p->RCR = repeat-1;

	//p->CNT=0;
	timer_reset(e_timer_no);
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f80c 	bl	8000bb8 <timer_reset>
	p->CR1 |= (1U<<0); //timer enable
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f043 0201 	orr.w	r2, r3, #1
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	601a      	str	r2, [r3, #0]


}
 8000bac:	bf00      	nop
 8000bae:	3718      	adds	r7, #24
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000000 	.word	0x20000000

08000bb8 <timer_reset>:

void timer_reset(TIMNO e_timer_no){
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
	TIM_RegDef_t *p= timTab[e_timer_no];
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	4a06      	ldr	r2, [pc, #24]	; (8000be0 <timer_reset+0x28>)
 8000bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bca:	60fb      	str	r3, [r7, #12]
	p->CNT=0;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000bd2:	bf00      	nop
 8000bd4:	3714      	adds	r7, #20
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	20000000 	.word	0x20000000

08000be4 <timer_start>:
void timer_start(TIMNO e_timer_no, int bstart_stop){
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	6039      	str	r1, [r7, #0]
 8000bee:	71fb      	strb	r3, [r7, #7]
	TIM_RegDef_t *p= timTab[e_timer_no];
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <timer_start+0x48>)
 8000bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf8:	60fb      	str	r3, [r7, #12]
	if(bstart_stop==TIMER_START)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d106      	bne.n	8000c0e <timer_start+0x2a>
		p->CR1 |=(1U<<0);
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f043 0201 	orr.w	r2, r3, #1
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	601a      	str	r2, [r3, #0]
	else if(bstart_stop==TIMER_STOP)
		p->CR1 &= ~(1U<<0);
}
 8000c0c:	e008      	b.n	8000c20 <timer_start+0x3c>
	else if(bstart_stop==TIMER_STOP)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d105      	bne.n	8000c20 <timer_start+0x3c>
		p->CR1 &= ~(1U<<0);
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f023 0201 	bic.w	r2, r3, #1
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	601a      	str	r2, [r3, #0]
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	20000000 	.word	0x20000000

08000c30 <timer_interrupt_config>:

void timer_interrupt_config(TIMNO e_timer_no){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
	TIM_RegDef_t *pTimer= timTab[e_timer_no];
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <timer_interrupt_config+0x30>)
 8000c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c42:	60fb      	str	r3, [r7, #12]
	pTimer->DIER |= (1U<<0); // Çevresel kısımda kesme kaynağı aktif edildi.
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	f043 0201 	orr.w	r2, r3, #1
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	60da      	str	r2, [r3, #12]
	nvic_irqno_enable(IRQ_TIM6_DAC);
 8000c50:	2036      	movs	r0, #54	; 0x36
 8000c52:	f7ff fac9 	bl	80001e8 <nvic_irqno_enable>
}
 8000c56:	bf00      	nop
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000000 	.word	0x20000000

08000c64 <TIM6_DAC_IRQHandler>:



void TIM6_DAC_IRQHandler(){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	static int a =0;
	++a;
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <TIM6_DAC_IRQHandler+0x28>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	4a07      	ldr	r2, [pc, #28]	; (8000c8c <TIM6_DAC_IRQHandler+0x28>)
 8000c70:	6013      	str	r3, [r2, #0]
	gpio_toggleto_output_pin(GPIOD, GPIO_PIN_NO_14);
 8000c72:	210e      	movs	r1, #14
 8000c74:	4806      	ldr	r0, [pc, #24]	; (8000c90 <TIM6_DAC_IRQHandler+0x2c>)
 8000c76:	f7ff fd74 	bl	8000762 <gpio_toggleto_output_pin>
	//TIMER6->SR &= ~(1U<<0);
	Clear_IT_PendingBit(); //makro
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <TIM6_DAC_IRQHandler+0x30>)
 8000c7c:	691b      	ldr	r3, [r3, #16]
 8000c7e:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <TIM6_DAC_IRQHandler+0x30>)
 8000c80:	f023 0301 	bic.w	r3, r3, #1
 8000c84:	6113      	str	r3, [r2, #16]

}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	2000004c 	.word	0x2000004c
 8000c90:	40020c00 	.word	0x40020c00
 8000c94:	40001000 	.word	0x40001000

08000c98 <mini_delay>:
void delay(){
	for(int i=0;i<1000000;++i)
		;
}

void mini_delay(){
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
	for(int i=0;i<100000;++i)
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	e002      	b.n	8000caa <mini_delay+0x12>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <mini_delay+0x28>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	ddf8      	ble.n	8000ca4 <mini_delay+0xc>
		;
}
 8000cb2:	bf00      	nop
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	0001869f 	.word	0x0001869f

08000cc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cc4:	480d      	ldr	r0, [pc, #52]	; (8000cfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cc6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cc8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ccc:	480c      	ldr	r0, [pc, #48]	; (8000d00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cce:	490d      	ldr	r1, [pc, #52]	; (8000d04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	; (8000d08 <LoopForever+0xe>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd4:	e002      	b.n	8000cdc <LoopCopyDataInit>

08000cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cda:	3304      	adds	r3, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce0:	d3f9      	bcc.n	8000cd6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ce4:	4c0a      	ldr	r4, [pc, #40]	; (8000d10 <LoopForever+0x16>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce8:	e001      	b.n	8000cee <LoopFillZerobss>

08000cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cec:	3204      	adds	r2, #4

08000cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf0:	d3fb      	bcc.n	8000cea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cf2:	f000 f811 	bl	8000d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cf6:	f7ff fdbf 	bl	8000878 <main>

08000cfa <LoopForever>:

LoopForever:
    b LoopForever
 8000cfa:	e7fe      	b.n	8000cfa <LoopForever>
  ldr   r0, =_estack
 8000cfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000d08:	08000d80 	.word	0x08000d80
  ldr r2, =_sbss
 8000d0c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000d10:	20000050 	.word	0x20000050

08000d14 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC_IRQHandler>
	...

08000d18 <__libc_init_array>:
 8000d18:	b570      	push	{r4, r5, r6, lr}
 8000d1a:	4d0d      	ldr	r5, [pc, #52]	; (8000d50 <__libc_init_array+0x38>)
 8000d1c:	4c0d      	ldr	r4, [pc, #52]	; (8000d54 <__libc_init_array+0x3c>)
 8000d1e:	1b64      	subs	r4, r4, r5
 8000d20:	10a4      	asrs	r4, r4, #2
 8000d22:	2600      	movs	r6, #0
 8000d24:	42a6      	cmp	r6, r4
 8000d26:	d109      	bne.n	8000d3c <__libc_init_array+0x24>
 8000d28:	4d0b      	ldr	r5, [pc, #44]	; (8000d58 <__libc_init_array+0x40>)
 8000d2a:	4c0c      	ldr	r4, [pc, #48]	; (8000d5c <__libc_init_array+0x44>)
 8000d2c:	f000 f818 	bl	8000d60 <_init>
 8000d30:	1b64      	subs	r4, r4, r5
 8000d32:	10a4      	asrs	r4, r4, #2
 8000d34:	2600      	movs	r6, #0
 8000d36:	42a6      	cmp	r6, r4
 8000d38:	d105      	bne.n	8000d46 <__libc_init_array+0x2e>
 8000d3a:	bd70      	pop	{r4, r5, r6, pc}
 8000d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d40:	4798      	blx	r3
 8000d42:	3601      	adds	r6, #1
 8000d44:	e7ee      	b.n	8000d24 <__libc_init_array+0xc>
 8000d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d4a:	4798      	blx	r3
 8000d4c:	3601      	adds	r6, #1
 8000d4e:	e7f2      	b.n	8000d36 <__libc_init_array+0x1e>
 8000d50:	08000d78 	.word	0x08000d78
 8000d54:	08000d78 	.word	0x08000d78
 8000d58:	08000d78 	.word	0x08000d78
 8000d5c:	08000d7c 	.word	0x08000d7c

08000d60 <_init>:
 8000d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d62:	bf00      	nop
 8000d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d66:	bc08      	pop	{r3}
 8000d68:	469e      	mov	lr, r3
 8000d6a:	4770      	bx	lr

08000d6c <_fini>:
 8000d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d6e:	bf00      	nop
 8000d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d72:	bc08      	pop	{r3}
 8000d74:	469e      	mov	lr, r3
 8000d76:	4770      	bx	lr
