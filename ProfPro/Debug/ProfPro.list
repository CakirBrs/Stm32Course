
ProfPro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002d0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000478  08000480  00010480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000478  08000478  00010480  2**0
                  CONTENTS
  4 .ARM          00000000  08000478  08000478  00010480  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000478  08000480  00010480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000478  08000478  00010478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800047c  0800047c  0001047c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010480  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010480  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f06  00000000  00000000  000104b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004cb  00000000  00000000  000113b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000120  00000000  00000000  00011888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000c8  00000000  00000000  000119a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001455  00000000  00000000  00011a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001386  00000000  00000000  00012ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000054d6  00000000  00000000  0001424b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00019721  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002d4  00000000  00000000  00019774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000460 	.word	0x08000460

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000460 	.word	0x08000460

080001e8 <nvic_irqno_enable>:
 *  Created on: 7 Oca 2023
 *      Author: metab
 */
#include "coreM4.h"

void nvic_irqno_enable(uint8_t irq_num){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
	if(irq_num < 32)
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	2b1f      	cmp	r3, #31
 80001f6:	d809      	bhi.n	800020c <nvic_irqno_enable+0x24>
		NVIC_ISERx->NVIC_ISER0 |= (1U<<irq_num );
 80001f8:	4b16      	ldr	r3, [pc, #88]	; (8000254 <nvic_irqno_enable+0x6c>)
 80001fa:	681a      	ldr	r2, [r3, #0]
 80001fc:	79fb      	ldrb	r3, [r7, #7]
 80001fe:	2101      	movs	r1, #1
 8000200:	fa01 f303 	lsl.w	r3, r1, r3
 8000204:	4913      	ldr	r1, [pc, #76]	; (8000254 <nvic_irqno_enable+0x6c>)
 8000206:	4313      	orrs	r3, r2
 8000208:	600b      	str	r3, [r1, #0]
	else if( irq_num < 64)
		NVIC_ISERx->NVIC_ISER1 |= (1U<<(irq_num%32));
	else if(irq_num <= 81)
		NVIC_ISERx->NVIC_ISER2 |= (1U<<(irq_num%32));

}
 800020a:	e01c      	b.n	8000246 <nvic_irqno_enable+0x5e>
	else if( irq_num < 64)
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	2b3f      	cmp	r3, #63	; 0x3f
 8000210:	d80b      	bhi.n	800022a <nvic_irqno_enable+0x42>
		NVIC_ISERx->NVIC_ISER1 |= (1U<<(irq_num%32));
 8000212:	4b10      	ldr	r3, [pc, #64]	; (8000254 <nvic_irqno_enable+0x6c>)
 8000214:	685a      	ldr	r2, [r3, #4]
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 031f 	and.w	r3, r3, #31
 800021c:	2101      	movs	r1, #1
 800021e:	fa01 f303 	lsl.w	r3, r1, r3
 8000222:	490c      	ldr	r1, [pc, #48]	; (8000254 <nvic_irqno_enable+0x6c>)
 8000224:	4313      	orrs	r3, r2
 8000226:	604b      	str	r3, [r1, #4]
}
 8000228:	e00d      	b.n	8000246 <nvic_irqno_enable+0x5e>
	else if(irq_num <= 81)
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	2b51      	cmp	r3, #81	; 0x51
 800022e:	d80a      	bhi.n	8000246 <nvic_irqno_enable+0x5e>
		NVIC_ISERx->NVIC_ISER2 |= (1U<<(irq_num%32));
 8000230:	4b08      	ldr	r3, [pc, #32]	; (8000254 <nvic_irqno_enable+0x6c>)
 8000232:	689a      	ldr	r2, [r3, #8]
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	f003 031f 	and.w	r3, r3, #31
 800023a:	2101      	movs	r1, #1
 800023c:	fa01 f303 	lsl.w	r3, r1, r3
 8000240:	4904      	ldr	r1, [pc, #16]	; (8000254 <nvic_irqno_enable+0x6c>)
 8000242:	4313      	orrs	r3, r2
 8000244:	608b      	str	r3, [r1, #8]
}
 8000246:	bf00      	nop
 8000248:	370c      	adds	r7, #12
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000e100 	.word	0xe000e100

08000258 <gpio_toggleto_output_pin>:
	pGpiox->ODR=val; //bitsel olarak değil direk data olarak yazıyoruz.

}


void gpio_toggleto_output_pin(GPIO_RegDef_t *pGpiox ,uint8_t pin_no){
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
 8000260:	460b      	mov	r3, r1
 8000262:	70fb      	strb	r3, [r7, #3]
	pGpiox->ODR ^=(1u<<pin_no);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	695a      	ldr	r2, [r3, #20]
 8000268:	78fb      	ldrb	r3, [r7, #3]
 800026a:	2101      	movs	r1, #1
 800026c:	fa01 f303 	lsl.w	r3, r1, r3
 8000270:	405a      	eors	r2, r3
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	615a      	str	r2, [r3, #20]

}
 8000276:	bf00      	nop
 8000278:	370c      	adds	r7, #12
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
	...

08000284 <clear_pending_reg>:
	return res!= 0? GPIO_PIN_SET : GPIO_PIN_RESET;
}



void clear_pending_reg(uint8_t pin_no){
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
	//clear PR
	if(EXTI->PR & (1<<pin_no))
 800028e:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <clear_pending_reg+0x3c>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	79fa      	ldrb	r2, [r7, #7]
 8000294:	2101      	movs	r1, #1
 8000296:	fa01 f202 	lsl.w	r2, r1, r2
 800029a:	4013      	ands	r3, r2
 800029c:	2b00      	cmp	r3, #0
 800029e:	d008      	beq.n	80002b2 <clear_pending_reg+0x2e>
		EXTI->PR |= (1U<<pin_no);
 80002a0:	4b07      	ldr	r3, [pc, #28]	; (80002c0 <clear_pending_reg+0x3c>)
 80002a2:	695a      	ldr	r2, [r3, #20]
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	2101      	movs	r1, #1
 80002a8:	fa01 f303 	lsl.w	r3, r1, r3
 80002ac:	4904      	ldr	r1, [pc, #16]	; (80002c0 <clear_pending_reg+0x3c>)
 80002ae:	4313      	orrs	r3, r2
 80002b0:	614b      	str	r3, [r1, #20]
}
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40013c00 	.word	0x40013c00

080002c4 <EXTI0_IRQHandler>:
#define BTN_RELEASED 0

uint32_t g_random_number;


void EXTI0_IRQHandler(void){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	mini_delay();
 80002c8:	f000 f866 	bl	8000398 <mini_delay>
	clear_pending_reg(GPIO_PIN_NO_0);
 80002cc:	2000      	movs	r0, #0
 80002ce:	f7ff ffd9 	bl	8000284 <clear_pending_reg>
	gpio_toggleto_output_pin(GPIOD, GPIO_PIN_NO_15);
 80002d2:	210f      	movs	r1, #15
 80002d4:	4802      	ldr	r0, [pc, #8]	; (80002e0 <EXTI0_IRQHandler+0x1c>)
 80002d6:	f7ff ffbf 	bl	8000258 <gpio_toggleto_output_pin>
}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40020c00 	.word	0x40020c00

080002e4 <HASH_RNG_IRQHandler>:


void HASH_RNG_IRQHandler(void){
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
	if(((RNG->SR & RNG_CEIS)==0) && ((RNG->SR & RNG_SEIS)==0) && ((RNG->SR & RNG_DRDY)==1))
 80002e8:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <HASH_RNG_IRQHandler+0x44>)
 80002ea:	685b      	ldr	r3, [r3, #4]
 80002ec:	f003 0320 	and.w	r3, r3, #32
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d110      	bne.n	8000316 <HASH_RNG_IRQHandler+0x32>
 80002f4:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <HASH_RNG_IRQHandler+0x44>)
 80002f6:	685b      	ldr	r3, [r3, #4]
 80002f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d10a      	bne.n	8000316 <HASH_RNG_IRQHandler+0x32>
 8000300:	4b09      	ldr	r3, [pc, #36]	; (8000328 <HASH_RNG_IRQHandler+0x44>)
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	f003 0301 	and.w	r3, r3, #1
 8000308:	2b01      	cmp	r3, #1
 800030a:	d104      	bne.n	8000316 <HASH_RNG_IRQHandler+0x32>
	{
		g_random_number = RNG->DR;
 800030c:	4b06      	ldr	r3, [pc, #24]	; (8000328 <HASH_RNG_IRQHandler+0x44>)
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	4a06      	ldr	r2, [pc, #24]	; (800032c <HASH_RNG_IRQHandler+0x48>)
 8000312:	6013      	str	r3, [r2, #0]
 8000314:	e002      	b.n	800031c <HASH_RNG_IRQHandler+0x38>
	}else if((RNG->SR & RNG_SEIS)==1){
 8000316:	4b04      	ldr	r3, [pc, #16]	; (8000328 <HASH_RNG_IRQHandler+0x44>)
 8000318:	685b      	ldr	r3, [r3, #4]
	}




}
 800031a:	bf00      	nop
 800031c:	bf00      	nop
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	50060800 	.word	0x50060800
 800032c:	2000001c 	.word	0x2000001c

08000330 <main>:




int main(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
	user_button.gPIO_pinConfig.pin_mode=GPIO_MODE_FE_IT;
	user_button.gPIO_pinConfig.pin_pupd= GPIO_NO_PUPD;
	gpio_init(&user_button);
	nvic_irqno_enable(IRQ_EXTI0);
**/
	rng_init();
 8000336:	f000 f807 	bl	8000348 <rng_init>


    while(1)
    {

    	int a =g_random_number;
 800033a:	4b02      	ldr	r3, [pc, #8]	; (8000344 <main+0x14>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	607b      	str	r3, [r7, #4]
    {
 8000340:	e7fb      	b.n	800033a <main+0xa>
 8000342:	bf00      	nop
 8000344:	2000001c 	.word	0x2000001c

08000348 <rng_init>:
 */


#include "rng.h"

void rng_init(){
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0

	//PLL on
	RCC->CR=PLLON;
 800034c:	4b10      	ldr	r3, [pc, #64]	; (8000390 <rng_init+0x48>)
 800034e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000352:	601a      	str	r2, [r3, #0]
	//PLL ready flag
	while(!(RCC->CR & PLLREADY)); //PLLREADY hazır olana kadar bekle demek bu.
 8000354:	bf00      	nop
 8000356:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <rng_init+0x48>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800035e:	2b00      	cmp	r3, #0
 8000360:	d0f9      	beq.n	8000356 <rng_init+0xe>

	//clock
	RNG_CLOCK_ENABLE();
 8000362:	4b0b      	ldr	r3, [pc, #44]	; (8000390 <rng_init+0x48>)
 8000364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000366:	4a0a      	ldr	r2, [pc, #40]	; (8000390 <rng_init+0x48>)
 8000368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800036c:	6353      	str	r3, [r2, #52]	; 0x34

	//1-enable interrupt
	RNG->CR |= IE;
 800036e:	4b09      	ldr	r3, [pc, #36]	; (8000394 <rng_init+0x4c>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4a08      	ldr	r2, [pc, #32]	; (8000394 <rng_init+0x4c>)
 8000374:	f043 0308 	orr.w	r3, r3, #8
 8000378:	6013      	str	r3, [r2, #0]

	//2 Rngen bit in the rng_cr
	RNG->CR |= RNGEN;
 800037a:	4b06      	ldr	r3, [pc, #24]	; (8000394 <rng_init+0x4c>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a05      	ldr	r2, [pc, #20]	; (8000394 <rng_init+0x4c>)
 8000380:	f043 0304 	orr.w	r3, r3, #4
 8000384:	6013      	str	r3, [r2, #0]

	//3 seis ve ceis oku
	nvic_irqno_enable(IRQ_HASH_RNG);
 8000386:	2050      	movs	r0, #80	; 0x50
 8000388:	f7ff ff2e 	bl	80001e8 <nvic_irqno_enable>

}
 800038c:	bf00      	nop
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40023800 	.word	0x40023800
 8000394:	50060800 	.word	0x50060800

08000398 <mini_delay>:
void delay(){
	for(int i=0;i<1000000;++i)
		;
}

void mini_delay(){
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
	for(int i=0;i<100000;++i)
 800039e:	2300      	movs	r3, #0
 80003a0:	607b      	str	r3, [r7, #4]
 80003a2:	e002      	b.n	80003aa <mini_delay+0x12>
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	3301      	adds	r3, #1
 80003a8:	607b      	str	r3, [r7, #4]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4a04      	ldr	r2, [pc, #16]	; (80003c0 <mini_delay+0x28>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	ddf8      	ble.n	80003a4 <mini_delay+0xc>
		;
}
 80003b2:	bf00      	nop
 80003b4:	bf00      	nop
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr
 80003c0:	0001869f 	.word	0x0001869f

080003c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003c4:	480d      	ldr	r0, [pc, #52]	; (80003fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003cc:	480c      	ldr	r0, [pc, #48]	; (8000400 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ce:	490d      	ldr	r1, [pc, #52]	; (8000404 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003d0:	4a0d      	ldr	r2, [pc, #52]	; (8000408 <LoopForever+0xe>)
  movs r3, #0
 80003d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d4:	e002      	b.n	80003dc <LoopCopyDataInit>

080003d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003da:	3304      	adds	r3, #4

080003dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e0:	d3f9      	bcc.n	80003d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003e2:	4a0a      	ldr	r2, [pc, #40]	; (800040c <LoopForever+0x12>)
  ldr r4, =_ebss
 80003e4:	4c0a      	ldr	r4, [pc, #40]	; (8000410 <LoopForever+0x16>)
  movs r3, #0
 80003e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e8:	e001      	b.n	80003ee <LoopFillZerobss>

080003ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003ec:	3204      	adds	r2, #4

080003ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f0:	d3fb      	bcc.n	80003ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003f2:	f000 f811 	bl	8000418 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003f6:	f7ff ff9b 	bl	8000330 <main>

080003fa <LoopForever>:

LoopForever:
    b LoopForever
 80003fa:	e7fe      	b.n	80003fa <LoopForever>
  ldr   r0, =_estack
 80003fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000404:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000408:	08000480 	.word	0x08000480
  ldr r2, =_sbss
 800040c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000410:	20000020 	.word	0x20000020

08000414 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000414:	e7fe      	b.n	8000414 <ADC_IRQHandler>
	...

08000418 <__libc_init_array>:
 8000418:	b570      	push	{r4, r5, r6, lr}
 800041a:	4d0d      	ldr	r5, [pc, #52]	; (8000450 <__libc_init_array+0x38>)
 800041c:	4c0d      	ldr	r4, [pc, #52]	; (8000454 <__libc_init_array+0x3c>)
 800041e:	1b64      	subs	r4, r4, r5
 8000420:	10a4      	asrs	r4, r4, #2
 8000422:	2600      	movs	r6, #0
 8000424:	42a6      	cmp	r6, r4
 8000426:	d109      	bne.n	800043c <__libc_init_array+0x24>
 8000428:	4d0b      	ldr	r5, [pc, #44]	; (8000458 <__libc_init_array+0x40>)
 800042a:	4c0c      	ldr	r4, [pc, #48]	; (800045c <__libc_init_array+0x44>)
 800042c:	f000 f818 	bl	8000460 <_init>
 8000430:	1b64      	subs	r4, r4, r5
 8000432:	10a4      	asrs	r4, r4, #2
 8000434:	2600      	movs	r6, #0
 8000436:	42a6      	cmp	r6, r4
 8000438:	d105      	bne.n	8000446 <__libc_init_array+0x2e>
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000440:	4798      	blx	r3
 8000442:	3601      	adds	r6, #1
 8000444:	e7ee      	b.n	8000424 <__libc_init_array+0xc>
 8000446:	f855 3b04 	ldr.w	r3, [r5], #4
 800044a:	4798      	blx	r3
 800044c:	3601      	adds	r6, #1
 800044e:	e7f2      	b.n	8000436 <__libc_init_array+0x1e>
 8000450:	08000478 	.word	0x08000478
 8000454:	08000478 	.word	0x08000478
 8000458:	08000478 	.word	0x08000478
 800045c:	0800047c 	.word	0x0800047c

08000460 <_init>:
 8000460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000462:	bf00      	nop
 8000464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000466:	bc08      	pop	{r3}
 8000468:	469e      	mov	lr, r3
 800046a:	4770      	bx	lr

0800046c <_fini>:
 800046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046e:	bf00      	nop
 8000470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000472:	bc08      	pop	{r3}
 8000474:	469e      	mov	lr, r3
 8000476:	4770      	bx	lr
