/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h> // ctrl+space oto tamamlama
#include "stm32f407xx.h"
#include "gpio.h"
/*
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
*/

void delay(){
	for(int i=0;i<1000000;++i)
		;
}

#define BTN_PRESSED	1
#define BTN_RELEASED 0

int main(void)
{


/**
	GPIO_Handle_t Gpio_pd;
	Gpio_pd.pGpioX=GPIOD;
	Gpio_pd.gPIO_pinConfig.pin_number = GPIO_PIN_NO_15;
	Gpio_pd.gPIO_pinConfig.pin_mode = GPIO_MODE_OUT;
	Gpio_pd.gPIO_pinConfig.pin_speed=GPIO_SPEED_MEDIUM;
	Gpio_pd.gPIO_pinConfig.pin_otype = GPIO_OTYPE_PP;
	Gpio_pd.gPIO_pinConfig.pin_pupd = GPIO_NO_PUPD;

	gpio_init(&Gpio_pd);
**/

	GPIO_Handle_t Gpio_pd_blue={GPIOD,{GPIO_PIN_NO_15,GPIO_MODE_OUT,GPIO_SPEED_MEDIUM,GPIO_OTYPE_PP,GPIO_NO_PUPD}};
	GPIO_Handle_t Gpio_pd_red={GPIOD,{GPIO_PIN_NO_14,GPIO_MODE_OUT,GPIO_SPEED_MEDIUM,GPIO_OTYPE_PP,GPIO_NO_PUPD}};
	GPIO_Handle_t Gpio_pd_orange={GPIOD,{GPIO_PIN_NO_13,GPIO_MODE_OUT,GPIO_SPEED_MEDIUM,GPIO_OTYPE_PP,GPIO_NO_PUPD}};
	GPIO_Handle_t Gpio_pd_green={GPIOD,{GPIO_PIN_NO_12,GPIO_MODE_OUT,GPIO_SPEED_MEDIUM,GPIO_OTYPE_PP,GPIO_NO_PUPD}};

	gpio_init(&Gpio_pd_blue);
	gpio_init(&Gpio_pd_green);
	gpio_init(&Gpio_pd_red);
	gpio_init(&Gpio_pd_orange);


	//A portunun 0. pini push button
	GPIO_Handle_t Gpio_pd_button={GPIOA,{GPIO_PIN_NO_0, GPIO_MODE_IN, GPIO_SPEED_MEDIUM, 0, GPIO_NO_PUPD}};
	gpio_init(&Gpio_pd_button);

	//user button interrupt test
	GPIO_Handle_t user_button;
	user_button.gPIO_pinConfig.pin_number=GPIO_PIN_NO_0;
	user_button.gPIO_pinConfig.pin_mode=GPIO_MODE_FRE_IT;
	user_button.gPIO_pinConfig.pin_pupd= GPIO_NO_PUPD;
	gpio_init(&user_button);

	//gpio_writeto_output_pin(GPIOD , GPIO_PIN_GREEN, GPIO_PIN_SET); //GPIO_PIN_NO_15de yazÄ±labilir GPIO_PIN_GREEN yerine
	//gpio_writeto_output_pin(GPIOD , GPIO_PIN_RED, GPIO_PIN_SET);
	//gpio_writeto_output_pin(GPIOD , GPIO_PIN_BLUE, GPIO_PIN_SET);
	//gpio_writeto_output_pin(GPIOD , GPIO_PIN_ORANGE, GPIO_PIN_SET);

	//gpio_writeto_output_pin(GPIOD , GPIO_PIN_ORANGE, GPIO_PIN_RESET);

    while(1)
    {
    	/**
    	gpio_toggleto_output_pin(GPIOD, GPIO_PIN_BLUE);
    	delay();
		**/

    	gpio_toggleto_output_pin(GPIOD, GPIO_PIN_BLUE);
    	uint32_t res=gpio_read_input_pin(GPIOA, GPIO_PIN_NO_0);
    	if(res==BTN_PRESSED){
    		gpio_toggleto_output_pin(GPIOD, GPIO_PIN_GREEN);
    		delay();
    	}



    }
}
